var min_lat, min_long, max_lat, max_long, centre_lat, centre_long, map;
var positions = [], markers = [], closed_markers = [], categories = [];
var icons = {};

function create_icon( colour ) {
  // We have to create an extra div inside the icon div because we want
  // to transform the icon using rotate, and Leaflet uses the 'transform'
  // property to place the div, so otherwise our rotate would get
  // clobbered every time the map was panned or zoomed.  Also, we have
  // to set the iconSize to null since otherwise Leaflet assigns it a
  // fixed width and height, and we want the container to expand to the
  // size of the actual marker div.
  return L.divIcon( { className: 'map-marker-container',
                      iconSize: null,
                      html: '<div class="map-marker ' + colour
                            + '-map-marker"></div>',
                      popupAnchor: [ 1, -44 ] } );
}

icons.open = create_icon( 'green' );
icons.closed = create_icon( 'red' );

$(
  function() {
    $('#map_canvas').height( $(window).height() - $('#banner').height() );
    var map_centre = new L.LatLng( centre_lat, centre_long );
    map = new L.Map( 'map_canvas', { center: map_centre } );

    var osm_url = 'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
    var osm_attrib = 'Â© <a href="http://www.openstreetmap.org/copyright">OpenStreetMap contributors</a>';

    var osm_layer = new L.TileLayer( osm_url, { attribution: osm_attrib } );

    if ( min_lat && ( min_lat != max_lat ) ) {
      var bounds = new L.LatLngBounds( new L.LatLng( min_lat, min_long ),
                                       new L.LatLng( max_lat, max_long ) );
      map.fitBounds( bounds );
    } else {
      map.setView( map_centre, 13 );
    }

    map.addLayer( osm_layer );
    L.control.scale().addTo(map);

    create_all_markers();
    show_all_markers();
  }
);

function add_category_markers( cat ) {
  markers.forEach( function( marker, index ) {
    if ( categories[index] === cat.id ) {
      map.addLayer( markers[index] );
    }
  } );
}

function remove_category_markers( cat ) {
  markers.forEach( function( marker, index ) {
    if ( categories[index] === cat.id ) {
      map.removeLayer( markers[index] );
    }
  } );
}

function show_category_markers( cat ) {
  add_category_markers( cat );
  $( '#toggle_cat_' + cat.id ).html( '<a href="#" id="hide_cat_' + cat.id + '">[hide]</a>' );
  $( 'li.cat_' + cat.id + '_item').show();
  $( '#hide_cat_' + cat.id ).click(
                                    function() {
                                      hide_category_markers( cat );
                                      return false;
                                    }
                                  );
}

function hide_category_markers( cat ) {
  remove_category_markers( cat );
  $( '#toggle_cat_' + cat.id ).html( '<a href="#" id="show_cat_' + cat.id + '">[show]</a>' );
  $( 'li.cat_' + cat.id + '_item').hide();
  $( '#show_cat_' + cat.id ).click(
                                    function() {
                                      show_category_markers( cat );
                                      return false;
                                    }
                                  );
}

function create_marker( i, entity ) {
  var content, icon, marker, position;

  if ( entity.not_on_map ) {
    return;
  }

  position = new L.LatLng( entity.lat, entity.long );
  icon = icons[ entity.category ];

  marker = new L.Marker( position, { icon: icon } );

  content = '<a href="[% base_url %][% entity_type %]/' + entity.id +
            '.html">' + entity.name + '</a>';
  if ( entity.category === 'closed' ) {
    content = content + ' (closed)';
  }
  content = content + '<br>' + entity.address;

  marker.bindPopup( content );

  markers[ i ] = marker;
  positions[ i ] = position;
}

function show_popup( i ) {
  var top_of_map, padding;
  markers[ i ].openPopup();
  map.panTo( positions[ i ] );
  /* Also scroll the page back up if the top of the popup bubble is off the top
     of the viewport. */
  if ( $( '.leaflet-popup' ).offset().top < $( window ).scrollTop() ) {
    top_of_map = $( '#map_canvas' ).offset().top;
    padding = parseFloat($( 'body' ).css( 'font-size' ) ) * 0.5;
    $( 'html, body' ).animate( { scrollTop: top_of_map - padding }, 'slow' );
  }
  return false;
}

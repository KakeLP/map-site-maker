var min_lat, min_long, max_lat, max_long, centre_lat, centre_long, map;
var positions = [], markers = [], closed_markers = [];
var icons = {};

var gicon_green = L.Icon.extend( {
    options: {
      iconUrl: 'http://maps.google.com/mapfiles/ms/micons/green-dot.png',
      shadowUrl: null,
      iconSize: new L.Point( 32, 32 ),
      iconAnchor: new L.Point( 15, 32 ),
      popupAnchor: new L.Point( 0, -30 )
    }
} );

var gicon_red = L.Icon.extend( {
    options: {
      iconUrl: 'http://maps.google.com/mapfiles/ms/micons/red-dot.png',
      shadowUrl: null,
      iconSize: new L.Point( 32, 32 ),
      iconAnchor: new L.Point( 15, 32 ),
      popupAnchor: new L.Point( 0, -30 )
    }
} );

icons.open = new gicon_green();
icons.closed = new gicon_red();

var scope_showing_closed, scope_hiding_closed;

$(
  function() {
    $('#map_canvas').height( $(window).height() - $('#banner').height() );
    var map_centre = new L.LatLng( centre_lat, centre_long );
    map = new L.Map( 'map_canvas', { center: map_centre } );

    var mapquest_layer;
    var mq_url = 'http://{s}.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.png';
    var subdomains = [ 'otile1', 'otile2', 'otile3', 'otile4' ];
    var attrib = 'Data, imagery and map information provided by <a href="http://open.mapquest.co.uk" target="_blank">MapQuest</a>, <a href="http://www.openstreetmap.org/" target="_blank">OpenStreetMap</a> and contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/" target="_blank">CC-BY-SA</a>';

    mapquest_layer = new L.TileLayer( mq_url, { maxZoom: 18, attribution: attrib, subdomains: subdomains } );

    var osm_layer = new L.TileLayer(
        'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png' );

    if ( min_lat && ( min_lat != max_lat ) ) {
      var bounds = new L.LatLngBounds( new L.LatLng( min_lat, min_long ),
                                       new L.LatLng( max_lat, max_long ) );
      map.fitBounds( bounds );
    } else {
      map.setView( map_centre, 13 );
    }

    map.addLayer( osm_layer );

    var layersControl = new L.Control.Layers( {
      "MapQuest": mapquest_layer,
      "OpenStreetMap": osm_layer,
    } );
    map.addControl( layersControl );

    L.control.scale().addTo(map);

    add_open_markers();
    show_closed();
    scope_showing_closed = $( '#entity_list_scope' ).html();
    scope_hiding_closed = 'Open';
  }
);

var show_closed_button = '(<a href="#" id="show_closed">show the closed ones</a>)';
var hide_closed_button = '(<a href="#" id="hide_closed">hide the closed ones</a>)';

function hide_closed() {
    closed_markers.forEach( function( marker, index) { map.removeLayer( marker ) } );

    $( '#toggle_closed' ).html( show_closed_button );
    $( '#entity_list_scope' ).html( scope_hiding_closed );
    $( 'li.closed' ).hide();
    $( '#show_closed' ).click(
                               function() {
                                   show_closed();
                                   return false;
                               }
                             );
}

function show_closed() {
    add_closed_markers();
    $( '#toggle_closed' ).html( hide_closed_button );
    $( '#entity_list_scope' ).html( scope_showing_closed );
    $( 'li.closed' ).show();
    $( '#hide_closed' ).click(
                               function() {
                                   hide_closed();
                                   return false;
                               }
                             );
}

function add_marker( i, entity ) {
  var content, icon, marker, position;

  if ( entity.not_on_map ) {
    return;
  }

  position = new L.LatLng( entity.lat, entity.long );

  if ( entity.open ) {
    icon = icons.open;
  } else {
    icon = icons.closed;
  }

  marker = new L.Marker( position, { icon: icon } );
  map.addLayer( marker );

  content = '<a href="[% base_url %][% entity_type %]/' + entity.id +
            '.html">' + entity.name + '</a>';
  if ( !entity.open ) {
    content = content + ' (closed)';
  }
  content = content + '<br>' + entity.address;

  marker.bindPopup( content );

  markers[ i ] = marker;
  positions[ i ] = position;
  if ( !entity.open ) {
    closed_markers[ i ] = marker;
  }
}

function show_marker( i ) {
  var top_of_map, padding;
  markers[ i ].openPopup();
  map.panTo( positions[ i ] );
  /* Also scroll the page back up if the top of the popup bubble is off the top
     of the viewport. */
  if ( $( '.leaflet-popup' ).offset().top < $( window ).scrollTop() ) {
    top_of_map = $( '#map_canvas' ).offset().top;
    padding = parseFloat($( 'body' ).css( 'font-size' ) ) * 0.5;
    $( 'html, body' ).animate( { scrollTop: top_of_map - padding }, 'slow' );
  }
  return false;
}

#!/usr/bin/perl -w

use strict;

use File::Slurp;

my @files = glob "templates/*.tt";

die "No templates found in templates/" unless scalar @files;

my @names;
foreach my $file ( @files ) {
  my $name = $file;
  $name =~ s'^templates/'';
  push @names, $name;
  $name =~ s/\.tt$//;
  if ( $name !~ /^[a-z_]+$/ ) {
    die "Inappropriate template filename: $name.tt (should contain only "
        . "lowercase ASCII letters and underscores";
  }
}

my $module = qq(package MapSite::Templates;
use strict;

=head1 NAME

MapSite::Templates - Templates to generate a MapSite site.

=head1 DESCRIPTION

Class methods for outputting the templates to generate a MapSite site.

DO NOT EDIT THIS FILE DIRECTLY.  DO NOT ADD IT TO git.
IT IS GENERATED USING mapsite-package-extras.

=head1 METHODS

=over

=item B<list_templates>

  my \@templates = MapSite::Templates->list_templates;

Returns a list of template filenames that this module can generate (e.g.
header.tt, footer.tt, etc).

=cut

sub list_templates {
);

$module .= "  return qw(" . join( " ", @names ) . ");\n}";

$module .= qq(

=item B<get_template>

  my \$content = MapSite::Templates->get_template( "header.tt" );

Retrieves the specified template.

=cut

sub get_template {
  my \$class = shift;
  my \$template = shift;
);

foreach my $file ( @files ) {
  my $content = read_file( $file );
  $file =~ s'^templates/'';

  $module .= qq(
  if ( \$template eq "$file" ) {
    return q\($content\);
  }
  );
}

$module .= "}\n1;\n";

open my $fh, ">", "lib/MapSite/Templates.pm"
  or die "Can't open lib/MapSite/Templates.pm: $!";

print $fh $module;

close $fh or die "Can't close lib/MapSite/Templates.pm: $!";
